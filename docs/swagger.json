{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "IT-Traveler API",
    "description": "IT-Traveler is a RESTful API for managing user authentication and geo-markers.\nUsers can register, log in, create, update, delete and fetch their travel markers.\n",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for user registration, login, logout, refresh, and profile"
    },
    {
      "name": "Markers",
      "description": "Endpoints for managing travel markers (create, read, update, delete)"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Creates a new user account using name, email and password",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the user",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "Registration successful"
                    },
                    "data": {
                      "type": "object",
                      "description": "JWT tokens for authentication",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIs..."
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIs..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with email and password",
        "operationId": "loginUser",
        "description": "Authenticates a user and returns access and refresh tokens",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password.",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "Login successful"
                    },
                    "data": {
                      "type": "object",
                      "description": "JWT tokens for authentication",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIs..."
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIs..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh JWT tokens",
        "operationId": "refreshTokens",
        "description": "Uses refresh token to generate new access and refresh tokens",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "Valid refresh token",
                    "example": "eyJhbGciOiJIUzI1NiIs..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "Token refreshed successfully"
                    },
                    "data": {
                      "type": "object",
                      "description": "JWT tokens for authentication",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "New access token",
                          "example": "eyJhbGciOiJIUzI1NiIs..."
                        },
                        "refreshToken": {
                          "type": "string",
                          "description": "New refresh token",
                          "example": "eyJhbGciOiJIUzI1NiIs..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout the current user",
        "operationId": "logoutUser",
        "description": "Deletes the current user's session and invalidates the tokens",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Logout successful, no content returned"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get current user profile",
        "operationId": "getCurrentUser",
        "description": "Returns the profile of the currently authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "User fetched successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user",
                      "description": "Authenticated user details"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/markers": {
      "get": {
        "tags": [
          "Markers"
        ],
        "summary": "Get all markers of the authenticated user",
        "operationId": "getAllMarkers",
        "description": "Returns a list of all markers created by the current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user's markers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "Markers retrieved successfully"
                    },
                    "data": {
                      "type": "array",
                      "description": "List of retrieved markers",
                      "items": {
                        "$ref": "#/components/schemas/marker"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Markers"
        ],
        "summary": "Create a new marker",
        "operationId": "createMarkerWithImage",
        "description": "Creates a marker and uploads image to Cloudinary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "coordinates"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the marker",
                    "example": "Kyiv Independence Square"
                  },
                  "description": {
                    "type": "string",
                    "description": "Describing the marker",
                    "example": "The heart of Ukraine's capital"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file"
                  },
                  "coordinates": {
                    "type": "string",
                    "description": "Geographic coordinates",
                    "example": "30.5241, 50.4501"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Marker created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "Marker created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/marker",
                      "description": "Created marker object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/markers/{id}": {
      "put": {
        "tags": [
          "Markers"
        ],
        "summary": "Update an existing marker",
        "operationId": "updateMarker",
        "description": "Fully updates a marker (including image) by ID. Replaces all fields.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Marker ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674c7ea11a75750f5f9b86d4"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Updated title of the marker",
                    "example": "Updated Location"
                  },
                  "description": {
                    "type": "string",
                    "description": "Updated description of the marker",
                    "example": "New description"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "binary",
                    "description": "New image file"
                  },
                  "coordinates": {
                    "type": "string",
                    "description": "Updated geographic coordinates",
                    "example": "30.5241, 50.4501"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Marker updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "success",
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful",
                      "example": true
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code of the response",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "Short response message",
                      "example": "Marker updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/marker",
                      "description": "Updated marker object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Markers"
        ],
        "summary": "Delete marker by ID",
        "operationId": "deleteMarker",
        "description": "Deletes a marker that belongs to the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Marker ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "674c7ea11a75750f5f9b86d4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted market, no content returned"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request due to invalid request body or incorrect ID format",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "success",
                "status",
                "message",
                "code"
              ],
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates failure"
                },
                "status": {
                  "type": "integer",
                  "example": 400,
                  "description": "HTTP error status"
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable error message"
                },
                "code": {
                  "type": "string",
                  "description": "Application-specific error code"
                },
                "data": {
                  "type": "string",
                  "description": "Extra field-specific info (e.g. file field)"
                },
                "errors": {
                  "type": "array",
                  "description": "Validation errors list",
                  "items": {
                    "type": "object",
                    "properties": {
                      "property": {
                        "type": "string"
                      },
                      "constraints": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "validationError": {
                "summary": "Validation error",
                "value": {
                  "success": false,
                  "status": 400,
                  "message": "Invalid request body",
                  "code": "VALIDATION_ERROR",
                  "errors": [
                    {
                      "property": "password",
                      "constraints": {
                        "isLength": "Password must be at least 8 characters"
                      }
                    }
                  ]
                }
              },
              "invalidMarkerId": {
                "summary": "Invalid ID format",
                "value": {
                  "success": false,
                  "status": 400,
                  "message": "Invalid marker ID format",
                  "code": "INVALID_ID"
                }
              },
              "invalidJson": {
                "summary": "Invalid JSON body",
                "value": {
                  "success": false,
                  "status": 400,
                  "message": "Invalid JSON payload",
                  "code": "INVALID_JSON"
                }
              },
              "invalidFileField": {
                "summary": "Unexpected file field",
                "value": {
                  "success": false,
                  "status": 400,
                  "message": "Invalid file field",
                  "code": "LIMIT_UNEXPECTED_FILE",
                  "data": "Field imageExtra should not exist"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized access due to invalid or expired token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "success",
                "status",
                "message",
                "code"
              ],
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates failure"
                },
                "status": {
                  "type": "integer",
                  "example": 401,
                  "description": "HTTP error status"
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable error message"
                },
                "code": {
                  "type": "string",
                  "description": "Application-specific error code"
                }
              }
            },
            "examples": {
              "invalidCredentials": {
                "summary": "Email or password is incorrect",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Email or password is incorrect",
                  "code": "INVALID_CREDENTIALS"
                }
              },
              "tokenRequired": {
                "summary": "Missing refresh token in request",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Refresh token is required",
                  "code": "TOKEN_REQUIRED"
                }
              },
              "tokenExpired": {
                "summary": "Token has expired",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Token expired",
                  "code": "TOKEN_EXPIRED"
                }
              },
              "invalidToken": {
                "summary": "Token is invalid or malformed",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Invalid token",
                  "code": "INVALID_TOKEN"
                }
              },
              "sessionNotFound": {
                "summary": "Session not found for provided token",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Session not found",
                  "code": "SESSION_NOT_FOUND"
                }
              },
              "sessionExpired": {
                "summary": "Session expired according to stored session data",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Session expired",
                  "code": "SESSION_EXPIRED"
                }
              },
              "invalidHeader": {
                "summary": "Missing or malformed Authorization header",
                "value": {
                  "success": false,
                  "status": 401,
                  "message": "Authorization token is missing or invalid",
                  "code": "INVALID_AUTH_HEADER"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "success",
                "status",
                "message",
                "code"
              ],
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates failure"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable error message"
                },
                "code": {
                  "type": "string",
                  "description": "Application-specific error code"
                }
              }
            },
            "examples": {
              "userNotFound": {
                "summary": "User with the specified ID or email does not exist",
                "value": {
                  "success": false,
                  "status": 404,
                  "message": "User not found",
                  "code": "USER_NOT_FOUND"
                }
              },
              "markerNotFound": {
                "summary": "Marker with the specified ID does not exist",
                "value": {
                  "success": false,
                  "status": 404,
                  "message": "Marker not found",
                  "code": "MARKER_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict due to a resource already existing",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "success",
                "status",
                "message",
                "code"
              ],
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates failure"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable error message",
                  "example": "User with this email already exists"
                },
                "code": {
                  "type": "string",
                  "description": "Application-specific error code",
                  "example": "USER_EXISTS"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "success",
                "status",
                "message"
              ],
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates failure"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "General error name",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier (MongoDB ObjectId as string)",
            "example": "66342cc9c9a2e7fc0d4ccefa"
          },
          "name": {
            "type": "string",
            "description": "Full name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john.doe@example.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created",
            "example": "2024-04-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated",
            "example": "2024-04-02T08:45:30.000Z"
          }
        }
      },
      "marker": {
        "type": "object",
        "required": [
          "id",
          "title",
          "geometry",
          "userId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique marker identifier (MongoDB ObjectId as string)",
            "example": "66342cc9c9a2e7fc0d4ccefa"
          },
          "title": {
            "type": "string",
            "description": "Title of the marker",
            "example": "Dnipro Embankment"
          },
          "description": {
            "type": "string",
            "description": "Optional marker description",
            "example": "Beautiful view of the river"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "description": "Optional URL to an image",
            "example": "https://example.com/uploads/marker1.jpg"
          },
          "geometry": {
            "type": "object",
            "required": [
              "type",
              "coordinates"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Point"
                ],
                "example": "Point",
                "description": "GeoJSON geometry type"
              },
              "coordinates": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Coordinates as [longitude, latitude]",
                "example": [
                  35.0462,
                  48.4647
                ]
              }
            }
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the marker",
            "example": "66342cc9c9a2e7fc0d4ccefb"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation",
            "example": "2024-04-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last update",
            "example": "2024-04-02T08:45:30.000Z"
          }
        }
      }
    }
  }
}